
InterrupcionSemaforo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096d  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000722  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000405  00000000  00000000  000013eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fc  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030b  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_5>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  78:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <intermitencia>:
		stop = 8;
		intermitencia(PointPin, PointStop);
    }
}

void intermitencia(int *pointPin, int *CountStop){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	dc 01       	movw	r26, r24
  86:	eb 01       	movw	r28, r22
	
	for(int i = 0; i <= *CountStop; i++){
  88:	e0 e0       	ldi	r30, 0x00	; 0
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	29 c0       	rjmp	.+82     	; 0xe0 <intermitencia+0x60>
		
		PORTB |= (1 << *pointPin);
  8e:	85 b1       	in	r24, 0x05	; 5
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	a9 01       	movw	r20, r18
  96:	0c 90       	ld	r0, X
  98:	02 c0       	rjmp	.+4      	; 0x9e <intermitencia+0x1e>
  9a:	44 0f       	add	r20, r20
  9c:	55 1f       	adc	r21, r21
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <intermitencia+0x1a>
  a2:	48 2b       	or	r20, r24
  a4:	45 b9       	out	0x05, r20	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	81 ee       	ldi	r24, 0xE1	; 225
  aa:	94 e0       	ldi	r25, 0x04	; 4
  ac:	41 50       	subi	r20, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <intermitencia+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <intermitencia+0x36>
  b6:	00 00       	nop
		_delay_ms(100);
		PORTB &=~ (1 << *pointPin);
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	0c 90       	ld	r0, X
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <intermitencia+0x42>
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <intermitencia+0x3e>
  c6:	20 95       	com	r18
  c8:	29 23       	and	r18, r25
  ca:	25 b9       	out	0x05, r18	; 5
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	41 ee       	ldi	r20, 0xE1	; 225
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	40 40       	sbci	r20, 0x00	; 0
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <intermitencia+0x52>
  da:	00 c0       	rjmp	.+0      	; 0xdc <intermitencia+0x5c>
  dc:	00 00       	nop
    }
}

void intermitencia(int *pointPin, int *CountStop){
	
	for(int i = 0; i <= *CountStop; i++){
  de:	31 96       	adiw	r30, 0x01	; 1
  e0:	88 81       	ld	r24, Y
  e2:	99 81       	ldd	r25, Y+1	; 0x01
  e4:	8e 17       	cp	r24, r30
  e6:	9f 07       	cpc	r25, r31
  e8:	94 f6       	brge	.-92     	; 0x8e <intermitencia+0xe>
		_delay_ms(100);
		PORTB &=~ (1 << *pointPin);
		_delay_ms(100);
	}
			
	*CountStop = 0;
  ea:	19 82       	std	Y+1, r1	; 0x01
  ec:	18 82       	st	Y, r1
	PORTB &=~ (1 << *pointPin);
  ee:	25 b1       	in	r18, 0x05	; 5
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0c 90       	ld	r0, X
  f6:	02 c0       	rjmp	.+4      	; 0xfc <intermitencia+0x7c>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <intermitencia+0x78>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	85 b9       	out	0x05, r24	; 5
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <main>:
#include <util/delay.h>

void intermitencia(int *pointPin, int *CountStop);

int main(void)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	00 d0       	rcall	.+0      	; 0x112 <main+0x6>
 112:	00 d0       	rcall	.+0      	; 0x114 <main+0x8>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
	cli(); //Se desactivan todas las interrupciones globales
 118:	f8 94       	cli
	
	int stop = 0, Pin;
 11a:	1a 82       	std	Y+2, r1	; 0x02
 11c:	19 82       	std	Y+1, r1	; 0x01
    //Output pin
	DDRB |= (1 << 4); //Orange led
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	80 61       	ori	r24, 0x10	; 16
 122:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << 1); //Green led
 124:	84 b1       	in	r24, 0x04	; 4
 126:	82 60       	ori	r24, 0x02	; 2
 128:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << 7); //Red led
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	84 b9       	out	0x04, r24	; 4
	//Input pin
	DDRD &=~ (1 << 4); //Button
 130:	8a b1       	in	r24, 0x0a	; 10
 132:	8f 7e       	andi	r24, 0xEF	; 239
 134:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= (1 << PORTD4); //Pull-up activado
	
	//------------------- INTERRUPCIÓN ------------------------
	PCICR  |= (1 << PCIE2); //PCIE2:?Pin Change Interrupt Enable 2
 136:	e8 e6       	ldi	r30, 0x68	; 104
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT20); //Pin Change Enable Mask
 140:	ed e6       	ldi	r30, 0x6D	; 109
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 61       	ori	r24, 0x10	; 16
 148:	80 83       	st	Z, r24
	//PCIFR  |= (1 << PCIF2);
	sei(); //Se activan todas las interrupciones globales
 14a:	78 94       	sei
	
    while (1) 
    {
		int *PointStop = &stop, *PointPin = &Pin;
	
		Pin = 1; // Green on
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	9c 83       	std	Y+4, r25	; 0x04
 152:	8b 83       	std	Y+3, r24	; 0x03
		PORTB |= (1 << *PointPin);
 154:	85 b1       	in	r24, 0x05	; 5
 156:	82 60       	ori	r24, 0x02	; 2
 158:	85 b9       	out	0x05, r24	; 5
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	97 e2       	ldi	r25, 0x27	; 39
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x54>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x5e>
 16a:	00 00       	nop
		_delay_ms(800);
		stop = 4;
 16c:	04 e0       	ldi	r16, 0x04	; 4
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	1a 83       	std	Y+2, r17	; 0x02
 172:	09 83       	std	Y+1, r16	; 0x01
		intermitencia(PointPin, PointStop);
 174:	be 01       	movw	r22, r28
 176:	6f 5f       	subi	r22, 0xFF	; 255
 178:	7f 4f       	sbci	r23, 0xFF	; 255
 17a:	ce 01       	movw	r24, r28
 17c:	03 96       	adiw	r24, 0x03	; 3
 17e:	0e 94 40 00 	call	0x80	; 0x80 <intermitencia>
		
		Pin = 4; // Orange on
 182:	1c 83       	std	Y+4, r17	; 0x04
 184:	0b 83       	std	Y+3, r16	; 0x03
		PORTB |= (1 << *PointPin);
 186:	85 b1       	in	r24, 0x05	; 5
 188:	80 61       	ori	r24, 0x10	; 16
 18a:	85 b9       	out	0x05, r24	; 5
		stop = 8;
 18c:	68 94       	set
 18e:	ee 24       	eor	r14, r14
 190:	e3 f8       	bld	r14, 3
 192:	f1 2c       	mov	r15, r1
 194:	fa 82       	std	Y+2, r15	; 0x02
 196:	e9 82       	std	Y+1, r14	; 0x01
		intermitencia(PointPin, PointStop);
 198:	be 01       	movw	r22, r28
 19a:	6f 5f       	subi	r22, 0xFF	; 255
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	ce 01       	movw	r24, r28
 1a0:	03 96       	adiw	r24, 0x03	; 3
 1a2:	0e 94 40 00 	call	0x80	; 0x80 <intermitencia>
		
		Pin = 7; // Red on
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9c 83       	std	Y+4, r25	; 0x04
 1ac:	8b 83       	std	Y+3, r24	; 0x03
		PORTB |= (1 << *PointPin);
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	97 e2       	ldi	r25, 0x27	; 39
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0xae>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0xb8>
 1c4:	00 00       	nop
		_delay_ms(800);
		stop = 4;
 1c6:	1a 83       	std	Y+2, r17	; 0x02
 1c8:	09 83       	std	Y+1, r16	; 0x01
		intermitencia(PointPin, PointStop);
 1ca:	be 01       	movw	r22, r28
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	ce 01       	movw	r24, r28
 1d2:	03 96       	adiw	r24, 0x03	; 3
 1d4:	0e 94 40 00 	call	0x80	; 0x80 <intermitencia>
		
		Pin = 4; // Orange on
 1d8:	1c 83       	std	Y+4, r17	; 0x04
 1da:	0b 83       	std	Y+3, r16	; 0x03
		PORTB |= (1 << *PointPin);
 1dc:	85 b1       	in	r24, 0x05	; 5
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	85 b9       	out	0x05, r24	; 5
		stop = 8;
 1e2:	fa 82       	std	Y+2, r15	; 0x02
 1e4:	e9 82       	std	Y+1, r14	; 0x01
		intermitencia(PointPin, PointStop);
 1e6:	be 01       	movw	r22, r28
 1e8:	6f 5f       	subi	r22, 0xFF	; 255
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255
 1ec:	ce 01       	movw	r24, r28
 1ee:	03 96       	adiw	r24, 0x03	; 3
 1f0:	0e 94 40 00 	call	0x80	; 0x80 <intermitencia>
 1f4:	ab cf       	rjmp	.-170    	; 0x14c <main+0x40>

000001f6 <__vector_5>:
			
	*CountStop = 0;
	PORTB &=~ (1 << *pointPin);
}

ISR(PCINT2_vect){ //Solicitud de interrupción externa 1 (CONSULTAR: https://ece--classes-usc-edu.translate.goog/ee459/library/documents/avr_intr_vectors/?_x_tr_sl=en&_x_tr_tl=es&_x_tr_hl=es&_x_tr_pto=tc)
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
	
	if(PIND & (1 << PIND4)){
 20a:	4c 99       	sbic	0x09, 4	; 9
 20c:	1c c0       	rjmp	.+56     	; 0x246 <__vector_5+0x50>
 20e:	20 c0       	rjmp	.+64     	; 0x250 <__vector_5+0x5a>
		
		for(int j = 0; j <= 10; j++){
		PORTB |= (1 << PORTB1);
 210:	85 b1       	in	r24, 0x05	; 5
 212:	82 60       	ori	r24, 0x02	; 2
 214:	85 b9       	out	0x05, r24	; 5
 216:	4f ef       	ldi	r20, 0xFF	; 255
 218:	81 ee       	ldi	r24, 0xE1	; 225
 21a:	94 e0       	ldi	r25, 0x04	; 4
 21c:	41 50       	subi	r20, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <__vector_5+0x26>
 224:	00 c0       	rjmp	.+0      	; 0x226 <__vector_5+0x30>
 226:	00 00       	nop
		_delay_ms(100);
		PORTB &=~ (1 << PORTB1);
 228:	85 b1       	in	r24, 0x05	; 5
 22a:	8d 7f       	andi	r24, 0xFD	; 253
 22c:	85 b9       	out	0x05, r24	; 5
 22e:	4f ef       	ldi	r20, 0xFF	; 255
 230:	81 ee       	ldi	r24, 0xE1	; 225
 232:	94 e0       	ldi	r25, 0x04	; 4
 234:	41 50       	subi	r20, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <__vector_5+0x3e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__vector_5+0x48>
 23e:	00 00       	nop

ISR(PCINT2_vect){ //Solicitud de interrupción externa 1 (CONSULTAR: https://ece--classes-usc-edu.translate.goog/ee459/library/documents/avr_intr_vectors/?_x_tr_sl=en&_x_tr_tl=es&_x_tr_hl=es&_x_tr_pto=tc)
	
	if(PIND & (1 << PIND4)){
		
		for(int j = 0; j <= 10; j++){
 240:	2f 5f       	subi	r18, 0xFF	; 255
 242:	3f 4f       	sbci	r19, 0xFF	; 255
 244:	02 c0       	rjmp	.+4      	; 0x24a <__vector_5+0x54>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	2b 30       	cpi	r18, 0x0B	; 11
 24c:	31 05       	cpc	r19, r1
 24e:	04 f3       	brlt	.-64     	; 0x210 <__vector_5+0x1a>
		PORTB &=~ (1 << PORTB1);
		_delay_ms(100);
		}
	}
	
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
